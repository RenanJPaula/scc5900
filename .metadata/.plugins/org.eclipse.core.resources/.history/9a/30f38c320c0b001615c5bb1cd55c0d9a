package br.com.usp.sudoku.backtracking;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class Main {

	public static void main(String[] args) {
		try {
			Options options = new Options();
			options.addOption("h", "help", false, "command overview");
			options.addOption("b", "benchmark", false, "active benchmark statistics");
			options.addOption("fc", "forwardchecking", false, "active forward checking heuristic");
			options.addOption("mrv", "minimumremainingvalues", false, "active minimum remaining values heuristic");
			options.addOption("f", "file", true, "file path [required]");

			CommandLineParser parser = new DefaultParser();
			CommandLine cmd = parser.parse(options, args);

			boolean help = cmd.hasOption("h");
			String filePath = cmd.getOptionValue("f");
			boolean benchmark = cmd.hasOption("b");
			boolean forwardChecking = cmd.hasOption("fc");

			if (help) {
				HelpFormatter formatter = new HelpFormatter();
				formatter.printHelp("sudoku-backtracking", options);
			} else if (filePath == null) {
				System.err.println("File is required. See more in -h or --help option.");
			} else {
				
				final Long timeAverage = 0l;
				final Double timeAllocation = 0d;
				final int fail = 0;
				final int success = 0;
				
				List<Integer[][]> sudokus = extractSudokusFromFile(filePath);

				sudokus.forEach(sudoku -> {

					SuDokuBacktracking suDokuBacktracking = new SuDokuBacktracking(sudoku);
					suDokuBacktracking.setForwardChecking(forwardChecking);
					suDokuBacktracking.setMaxAllocationCount(1000000);

					boolean solve = suDokuBacktracking.solve();

					if (solve) {
						print(suDokuBacktracking, benchmark);
					} else {
						fail++;
						System.err.println("Solution not found. \n");
					}

				});
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

	private static void print(SuDokuBacktracking suDokuBacktracking, boolean printBenchmark) {
		int size = suDokuBacktracking.getSize();
		Integer[][] sudoku = suDokuBacktracking.getSudoku();
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				System.out.printf("%d ", sudoku[i][j]);
			}
			System.out.println();
		}
		System.out.println();

		if (printBenchmark) {
			long endTime = suDokuBacktracking.getEndTime();
			long beginTime = suDokuBacktracking.getBeginTime();
			System.out.printf("Solve in: %.3f seconds \n", (endTime - beginTime) / 1000000000d);
			System.out.printf("Allocation Count: %d \n", suDokuBacktracking.getAllocationCount());
			System.out.println();
		}
	}

	private static List<Integer[][]> extractSudokusFromFile(String filePath) {
		final List<Integer[][]> sudokus = new ArrayList<>();
		final Integer DIMENSION = 9;
		final Pattern pattern = Pattern.compile(" ");

		try {
			final Iterator<Integer[]> preparedLines = Files.lines(Paths.get(filePath)).parallel().filter(row -> {
				return !(row == null || "".equals(row.trim())) && pattern.split(row).length == DIMENSION;
			}).map(row -> {
				return pattern.splitAsStream(row).map(Integer::parseInt).toArray(Integer[]::new);
			}).iterator();

			Integer[][] sudoku = new Integer[DIMENSION][DIMENSION];
			Integer sudokuIndex = 0;

			while (preparedLines.hasNext()) {
				final Integer[] row = preparedLines.next();
				sudoku[sudokuIndex] = row;
				if (++sudokuIndex == DIMENSION) {
					sudokus.add(sudoku);
					sudokuIndex = 0;
					sudoku = new Integer[DIMENSION][DIMENSION];
				}
			}

		} catch (final IOException e) {
			e.printStackTrace();
		}

		return sudokus;
	}

}
