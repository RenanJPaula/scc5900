package br.com.usp.dtw;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class Main {

	public static final String SEPARATOR = " ";

	public static void main(String[] args) throws ParseException {
		Options options = new Options();
		options.addOption("h", "help", false, "command overview");
		options.addOption("trf", "trainingfile", true, "traning file path [required]");
		options.addOption("tef", "testfile", true, "test file path [required]");

		CommandLineParser parser = new DefaultParser();
		CommandLine cmd = parser.parse(options, args);

		boolean help = cmd.hasOption("h");
		String trainingFile = cmd.getOptionValue("trf");
		String testFile = cmd.getOptionValue("tef");

		if (help) {
			HelpFormatter formatter = new HelpFormatter();
			formatter.printHelp("sudoku-backtracking", options);
		} else if (trainingFile == null || testFile == null) {
			System.err.println("Traning file and Test file is required. See more in -h or --help option.");
		} else {

			final List<Double[]> trainingValues = Main.readFileToTemporalSeries(trainingFile);
			final List<Double[]> testValues = Main.readFileToTemporalSeries(testFile);

		}
	}

	private static List<Double[]> readFileToTemporalSeries(final Path path) throws IOException {
		final List<Double[]> temporalSeries = new ArrayList<>();
		Files.lines(path).forEach(row -> {
			final Double[] serie = Stream.of(PATTERN_SERIES.split(row)).map(Double::parseDouble).toArray(Double[]::new);
			temporalSeries.add(serie);
		});
		return temporalSeries;
	}

}
